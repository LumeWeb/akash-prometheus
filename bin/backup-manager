#!/bin/bash

# Perform backup
backup() {
  # Use mc CLI to upload TSDB files to S3
  mc alias set s3 ${AWS_S3_ENDPOINT} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} 2>/dev/null
  mc mirror --overwrite /data s3/${AWS_BUCKET_NAME}/
}

# Restore from S3
restore() {
  # Check available disk space
  available_disk_space=$(df -h "/data" | awk '{print $4}' | sed 's/%//g')
  available_disk_space_bytes=$(echo "$available_disk_space * 1024 * 1024" | bc)

  # Calculate total size of data to be restored
  mc alias set s3 ${AWS_S3_ENDPOINT} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} 2>/dev/null
  total_size=$(mc du --recursive s3/${AWS_BUCKET_NAME}/ | awk '{print $1}')

  # Calculate max safe threshold
  max_safe_threshold=$(echo "$available_disk_space_bytes * $MAX_DISK_USAGE_PERCENT / 100" | bc)

  # Check if there is enough disk space
  if [ $total_size -gt $max_safe_threshold ]; then
    # Restore only the data that fits within the available disk space
    mc mirror --overwrite s3/${AWS_BUCKET_NAME}/ /data --max-size $max_safe_threshold
  else
    # Restore all data
    mc mirror --overwrite s3/${AWS_BUCKET_NAME}/ /data
  fi
}

# Verify backup integrity
verify() {
  # Use mc CLI to verify backup integrity
  mc alias set s3 ${AWS_S3_ENDPOINT} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} 2>/dev/null
  mc ls s3/${AWS_BUCKET_NAME}/
}

# List available backups
list() {
  # Use mc CLI to list available backups
  mc alias set s3 ${AWS_S3_ENDPOINT} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} 2>/dev/null
  mc ls s3/${AWS_BUCKET_NAME}/
}

# Show backup system status
status() {
  # mc CLI does not support get-bucket-status command
  echo "mc CLI does not support get-bucket-status command"
}

case $1 in
  --backup)
    backup
    ;;
  --restore)
    restore
    ;;
  --verify)
    verify
    ;;
  --list)
    list
    ;;
  --status)
    status
    ;;
  *)
    echo "Usage: backup-manager <option>"
    exit 1
    ;;
esac
